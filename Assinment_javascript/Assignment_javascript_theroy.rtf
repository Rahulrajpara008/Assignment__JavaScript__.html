{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red11\green152\blue176;\red0\green77\blue187;\red0\green176\blue80;\red51\green51\blue51;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\cf1\ul\f0\fs72\lang9 Assignment javascript\cf2\par

\pard\sa200\sl276\slmult1\cf3\b\fs52 Javascript Theory Assignment\par
\ulnone\b0\f1\fs36\bullet\cf1\ul\b\i Question \b0 1\cf3\ulnone\i0 : \cf0 What is JavaScript? Explain the role of JavaScript in web development. \f0\par

\pard\ri-924\sa200\sl276\slmult1\cf3\ul\b\i Ans \ulnone :\cf0\b0\i0\par

\pard\sa200\sl276\slmult1\tab JavaScript is a programming language that developers use to create interactive web pages. \par
JavaScript is a programming language used to create dynamic content for websites. It achieves this by adding new HTML elements while modifying existing ones. Many coders enhance web development skills using JavaScript to create user-friendly and interactive websites.\par
\cf1\ul\b\i\f1\bullet  Question 2:\f0\lang16393  \ulnone\b0\i0  \cf0 H\f1\lang9 ow is JavaScript different from other programming languages like Python or\f0\lang16393  \f1\lang9 Java?\par
\cf3\ul\b\i\f0 Ans \ulnone :\cf0\b0\i0\par
\lang16393\tab I\f1\lang9 n terms of speed and performance, Python is a great choice for CPU-intensive tasks, whereas JavaScript is more suitable for dynamic and real-time interactions. The whole purpose of inventing JavaScript was to make it fast on the web with improved user engagement.\par
\cf1\ul\b\i\bullet  Question 3: \cf0\ulnone\b0\i0 Discuss the use of <script> tag in HTML. How can you link an external\f0\lang16393  \f1\lang9 JavaScript file to an HTML documen\f0\lang16393 t?\par
\cf3\ul\b\i\lang9 Ans \ulnone :\cf0\b0\i0\par
\lang16393\tab\f1\lang9 The <script> tag is used to embed a client-side script (JavaScript). The <script> element either contains scripting statements, or it points to an external script file through the src attribute. Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content.\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52 Variables and Data Types\ulnone\b0\i0\fs36\par

\pard\sa200\sl276\slmult1\ul\b\i\bullet  Question 1: \cf0\ulnone\b0\i0 What are variables in JavaScript? How do you declare a variable using var, let,\f0\lang16393  \f1\lang9 and\f0\lang16393  \f1\lang9 const?\par
\cf3\ul\b\i\f0 Ans \ulnone :\cf0\b0\i0\par
\lang16393\tab In JavaScript, variables are containers for storing data values. Think of them as named boxes where you can put information that you want to use later in your code.\par
\b You can declare variables in JavaScript using three keywords:\par
var: \b0 The traditional way to declare variables.\b\par
let: \b0 provides block-scoped variables.\par
\b const: \b0 , declares a constant variable (cannot be reassigned).\f1\lang9\par
\f0\lang16393\tab\f1\lang9 Variables declared with var are hoisted, which means they can be accessed before they are declared. Variables declared with let are not hoisted. Variables declared with const are not hoisted. Variables declared with var don't have a temporal dead zone, making them accessible before declaration.\par
\cf1\ul\b\i\bullet  Question 2: \cf0\ulnone\b0\i0 Explain the different data types in JavaScript. Provide examples for each\f0\lang16393 ?\par
\cf3\ul\b\i\lang9 Ans \ulnone :\cf0\par
\tab\i0 JavaScript has several data types, which can be categorized into two main groups:\par
Primitive Data Types:\b0\par
\b Number: \b0 Represents both integer and floating-point numbers.\par
\b String: \b0 Represents a sequence of characters, enclosed in single or double quotes.\par
\b Boolean: \b0 Represents a logical value, either true or false.\par
\b Null: \b0 Represents the intentional absence of any object value.\par
\b Undefined: \b0 Represents a variable that has been declared but has not been assigned a value.\par
\b Symbol: \b0 Represents a unique and immutable identifier.\par
\b Complex Data Types (Objects):\par
Object: \b0 A collection of key-value pairs, where keys are strings and values can be of any data type.\par
\b Array: \b0 An ordered collection of values, where each value can be of any data type.\par
\b Function: \b0 A reusable block of code that can be called to perform a specific task.\par
\b Date: \b0 Represents a specific date and time.\par
\b RegExp: \b0 Represents a regular expression pattern for matching text.\par
\par
\cf1\b\f1\bullet  Question 3: \cf0\b0 What is the difference between undefined and null in JavaScript?\par
\cf3\b\f0\lang16393 Ans :\cf0\par
\tab\b0 In JavaScript, null and undefined are two distinct types that represent different values. By definition, undefined means a variable has been declared but has not yet been assigned a value, whereas null is an assignment value, meaning that a variable has been declared and given the value of null .\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs56 JavaScript Operators\cf0\par

\pard\sa200\sl276\slmult1\cf1\ulnone\b0\i0\f1\fs36\bullet  \b Question 1: \cf0\b0 What are the different types of operators in JavaScript? Explain with examples.\par
\i\bullet  Arithmetic operators\par
\bullet  Assignment operators\par
\bullet  Comparison operators\par
\bullet  Logical operators\par
\cf3\b\i0\f0 Ans:\cf0\ul\b0\i\lang9\par
\ulnone\b\i0 JavaScript provides various types of operators to perform operations on data. Here's an explanation of the types you mentioned:\par
\ul\i 1. Arithmetic Operators:\par
\ulnone\i0 Addition (+): \b0 Adds two operands.\ul\b\i\par
\ulnone\b0\i0  \tab   let result = 5 + 3; \cf4 // result will be 8\par
\cf0\b Subtraction (-): \b0 Subtracts the right operand from the left operand.\par
   \tab   let result = 10 - 4\cf4 ; // result will be 6\par
\cf0\b Multiplication (*): \b0 Multiplies two operands.\par
\tab    let result = 2 * 6; \cf4 // result will be 12\par
\cf0\b Division (/): \b0 Divides the left operand by the right operand.\par
\tab    let result = 15 / 3\cf4 ; // result will be 5\par
\cf0\b Modulus (%): \b0 Returns the remainder after dividing the left operand by the right operand.\par
\tab    let result = 10 % 3\cf4 ; // result will be 1\par
\cf0\ul\b\i 2. Assignment Operators:\ulnone\b0\i0\par
\b Assignment (=): \b0 Assigns the value of the right operand to the left operand. \par
\tab    let x = 10;\par
\b Addition assignment (+=): \b0 Adds the right operand to the left operand and assigns the result to the left operand.\par
\tab    let x = 5;\par
 \tab    x += 3; \cf4 // x will be 8\cf0\par
\b Subtraction assignment (-=): \b0 Subtracts the right operand from the left operand and assigns the result to the left operand.\par
   let x = 10;\par
   x -= 2; \cf4 // x will be 8\cf0\b\par
Multiplication assignment (*=): \b0 Multiplies the left operand by the right operand and assigns the result to the left operand.\par
\tab    let x = 2;\par
   \tab    x *= 5; \cf4 // x will be 10\cf0\par
\b Division assignment (/=): \b0 Divides the left operand by the right operand and assigns the result to the left operand.\par
\tab    let x = 15;\par
\tab    x /= 3;          \cf4 // x will be 5\cf0\par
\b 3. Comparison Operators:\par
Equal to (==): \b0 Checks if two operands are equal in value.\par
\tab    let x = 5;\par
   \tab console.log(x == 5); // true\par
\b Not equal to (!=):\b0  Checks if two operands are not equal in value.\par
\tab    let x = 5;\par
   \tab console.log(x != 10); \cf4 // true\par
\cf0\b Strict equal to (===): \b0 Checks if two operands are equal in value and type.\par
\tab   let x = 5;\par
   \tab console.log(x === "5"); \cf4 // false\par
\cf0\b Strict not equal to (!==): \b0 Checks if two operands are not equal in value or type.\par
\tab    let x = 5;\par
   \tab console.log(x !== "5"); \cf4 // true\cf0\par
\b Greater than (>): \b0 Checks if the left operand is greater than the right operand.\par
\tab    let x = 10;\par
   \tab console.log(x > 5); \cf4 // true\cf0\par
\b Less than (<): \b0 Checks if the left operand is less than the right operand.\par
\tab    let x = 5;\par
   \tab console.log(x < 10); \cf4 // true\cf0\par
\ul\b\i 4. Logical Operators:\ulnone\b0\i0\par
\b Logical AND (&&): \b0 Returns true if both operands are true.\par
\tab    let x = 5;\par
   \tab console.log(x > 0 && x < 10\cf4 ); // true\cf0\b\par
Logical OR (||): \b0 Returns true if at least one operand is true.\par
   \tab let x = 5;\par
   \tab console.log(x > 10 || x < 10); \cf4 // true\cf0\par
\b Logical NOT (!): \b0 Inverts the boolean value of the operand.\par
\tab    let x = true;\par
   \tab console.log(!x); \cf4 // false\cf0\par
\cf1\b\f1\bullet  Question 2: \cf0\b0 What is the difference between == and === in JavaScript?\b\par
\cf3\f0\lang16393 Ans :\cf0\par
\tab\b0 The main difference between the two operators is how they compare values. The == operator compares the values of two variables after performing type conversion if necessary. On the other hand, the === operator compares the values of two variables without performing type conversion.\par
\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs48 Control Flow (If-Else, Switch)\par

\pard\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What is control flow in JavaScript? Explain how if-else statements work with\f0  \f1 an\f0  \f1 example\f0 ?\par
\cf3\b Ans :\cf0\par
\tab\b0 Control flow in JavaScript refers to the order in which statements are executed in a program. By default, statements are executed from top to bottom, one after the other. However, JavaScript provides various control structures that allow you to alter this flow, enabling you to create dynamic and responsive programs. \par
\b 1. Conditional Statements:\par
if statement:\b0\par
Executes a block of code if a specified condition is true.\par
\b if...else statement:\b0\par
Executes one block of code if a condition is true, and another block if it's false.\par
\b if...else if...else statement:\b0\par
Allows you to check multiple conditions and execute different code blocks based on the first true condition.\par
\b switch statement:\b0\par
Provides a way to evaluate an expression against multiple possible values and execute different code blocks accordingly.\par
\ul\i The if-else statement is used to execute both the true part and the false part of a given condition. If the condition is true, the if block code is executed and if the condition is false, the else block code is executed.\par
\ulnone\i0\par
\cf1\b\f1\bullet  Question 2:\b0  \cf0 Describe how switch statements work in JavaScript. When should you use a\f0  \f1 switch statement instead of if-else?\b\par
\cf3\f0 Ans :\tab\cf0\par
\tab\b0 In JavaScript, a switch statement is a control flow statement that allows you to evaluate an expression and execute different code blocks based on the value of that expression. It provides a more concise and readable alternative to a long series of if-else statements.\par
\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs48 Loops (For, While, Do-While\par

\pard\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 Explain the different types of loops in JavaScript (for, while, do-while). Provide abasic\f0  \f1 example of each\f0 ?\par
\cf3\b Ans :\cf0\par
\tab In JavaScript, loops are used to execute a block of code repeatedly until a certain condition is met. Here are the different types of loops in JavaScript: \par
1. for loop:\b0\par
Used when you know in advance how many times you want to loop.\par
\b Syntax:\b0\par
for (initialization; condition; increment/decrement) \{\cf4\par
  // code to be executed\par
\cf0\}\b\par
Example.\par
\b0\tab for (let i = 0; i < 5; i++) \{\par
\tab   console.log("Iteration:", i);\par

\pard\li720\sa200\sl276\slmult1\} \par

\pard\sa200\sl276\slmult1\b 2. while loop:\b0\par
Used when you don't know in advance how many times you want to loop.\par
The loop continues as long as the specified condition is true. \par
\b Syntax:\b0\par

\pard\li720\sa200\sl276\slmult1 while (condition) \{\par
\cf4   // code to be executed\par
\cf0\}\par

\pard\sa200\sl276\slmult1\b Example.\b0\par

\pard\li720\sa200\sl276\slmult1 let count = 0;\par
while (count < 5) \{\par
  console.log("Count:", count);\par
  count++;\par
\}\par

\pard\sa200\sl276\slmult1\b 3. do-while loop:\par
\b0 Similar to a while loop, but the code block is executed at least once, even if the condition is false.\par
\b Syntax:\b0\par

\pard\li720\sa200\sl276\slmult1 do \{\par
\cf4   // code to be executed\par
\cf0\} while (condition);\par

\pard\sa200\sl276\slmult1\b Example.\tab\b0\par

\pard\li720\sa200\sl276\slmult1 let x = 0;\par
do \{\par
  console.log("X:", x);\par
  x++;\par
\} while (x < 5);\par
\cf1\b\par
\f1\bullet  Question 2: \cf0\b0 What is the difference between a while loop and a do-while loop?\par
\cf3\b\f0 Ans :\cf0\f1\par
\f0 The main difference between a while loop and a do-while loop is when the condition is evaluated:\par
While loop\par
\b0 Evaluates the condition before executing the loop body. This means that if the condition is false, the loop body will not execute at all.\par
\b Do-while loop\b0\par
Executes the loop body once before evaluating the condition. This means that the loop body will execute at least once, regardless of whether the condition is true or false. \par
\par

\pard\li720\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52 Functions\ulnone\b0\i0\tab\par

\pard\li720\sa200\sl276\slmult1\cf0\b\f1\fs36\bullet\cf1  Question 1: \cf0\b0 What are functions in JavaScript? Explain the syntax for declaring and calling a\f0  \f1 function.\b\par
\cf3\f0 Ans :\cf0\par
\tab\b0 In JavaScript, functions are blocks of reusable code that perform a specific task. They help in organizing code, promoting reusability, and making it easier to read and maintain.\par
\b Declaring a Function:\b0\par
\b function declaration :\par
\b0 function functionName(parameter1, parameter2) \{\par
  // code to be executed\par
\}\par
\b function expression.\b0\par
const functionName = function(parameter1, parameter2) \{\par
\cf4   // code to be executed\par
\cf0\};\par
\b Arrow Function:\b0\par
const functionName = (parameter1, parameter2) => \{\par
\cf4   // code to be executed\par
\cf0\};\par
\b Calling a Function:\par
\b0 functionName(argument1, argument2); \par
\par

\pard\fi-10\li720\sa200\sl276\slmult1\ul\b\i Explanation:\par

\pard\li720\sa200\sl276\slmult1\ulnone\i0 function keyword:  \b0 This keyword signals that you are defining a function.\par

\pard\sa200\sl276\slmult1\b\tab functionName:  \b0 A descriptive name for your \tab function.\par

\pard\li720\sa200\sl276\slmult1\b parameters:  \b0 Placeholders for the values you want to pass to the function (optional).\par
\b curly braces \{\}:  \b0 Contains the code that will execute when the function is called.\par
\b arguments:  \b0 The actual values you pass to the function when you call it.\par
\par
\cf1\b\f1\bullet  Question 2: \cf0\b0 What is the difference between a function declaration and a function\f0  \f1 expression?\par
\cf3\b\f0 Ans :\cf0\par
Function declaration\b0\par
The JavaScript engine parses a function declaration before any code is executed. This means that a function can be called before it is defined in the code, a process known as function hoisting. \par
\b Function expression\b0\par
A function expression is not hoisted, so it cannot be called before it is defined. \par
\cf1\b\f1\bullet  Question 3: \cf0\b0 Discuss the concept of parameters and return values in functions\f0 ?\par
\cf3\b Ans :\cf0\par
\tab\b0 A return value is a result of the function's execution. It can be returned to the block of code that called the function and then used as needed. \par
Parameters are the input for a function that are necessary for the it to be executed and produce a result. Parameters are variables defined by name and type.\par
\par

\pard\li720\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52 Arrays\cf0\fs48\par

\pard\li720\sa200\sl276\slmult1\cf1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What is an array in JavaScript? How do you declare and initialize an array?\par
\cf3\b\f0 Ans: \cf0\par
\tab\b0 In JavaScript, an array is a data structure used to store a collection of values. These values can be of any data type, like numbers, strings, objects, or even other arrays.\par
\ul\b Declaring and initializing an array:\ulnone\b0\par
\b Array literal notation: \b0 This is the most common and preferred way to create an array.\par
\tab const fruits = ["apple", "banana", "orange"];\par
\b Array constructor: \b0 You can also use the Array constructor to create an array.\par
\tab const numbers = new Array(1, 2, 3, 4, 5);\b\par
\par
\cf1\f1\bullet  Question 2: \cf0\b0 Explain the methods push(), pop(), shift(), and unshift() used in arrays\f0 ?\par
\cf3\b Ans :\cf0\par
\b0\tab\b In JavaScript, arrays have several methods for adding or removing elements. Here's an explanation of push(), pop(), shift(), and unshift():\par
Adding Elements:\b0\par
\b push(): \b0 Adds one or more elements to the end of an array and returns the new length of the array. \par
\tab   const fruits = ["apple", "banana"];\par
  \tab fruits.push("orange"); \par
  console.log(fruits); \cf4 // Output: ["apple", "banana", "orange"]\par
\cf0\b unshift(): \b0 Adds one or more elements to the beginning of an array and returns the new length of the array. \par
\par
  \tab const fruits = ["apple", "banana"];\par
  \tab fruits.unshift("grape"); \par
  console.log(fruits); \cf4 // Output: ["grape", "apple", "banana"]\par
\cf0\b Removing Elements:\par
pop(): \b0 Removes the last element from an array and returns that element. \par
\tab   const fruits = ["apple", "banana", "orange"];\par
  \tab const removedFruit = fruits.pop(); \par
  \tab console.log(removedFruit\cf4 );  // Output: \tab "orange"\par
\cf0   console.log(fruits); \cf4 // Output: ["apple", "banana"]\par
\cf0\b shift(): \b0 Removes the first element from an array and returns that element. \par
  const fruits = ["apple", "banana", "orange"];\par
  const removedFruit = fruits.shift(); \par
  console.log(removedFruit); // Output: "apple"\par
  console.log(fruits); \cf4 // Output: ["banana", "orange"]\cf0\par
\par

\pard\li720\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs56 Objects\cf0\fs52\par

\pard\li720\sa200\sl276\slmult1\cf1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What is an object in JavaScript? How are objects different from arrays?\par
\cf3\b\f0 Ans :\cf0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0 An object is a collection of key-value pairs.\par
{\pntext\f2\'B7\tab}Each key is a string (or a symbol), and each value can be any data type (including other objects or arrays).\par
{\pntext\f2\'B7\tab}Think of objects as a way to represent real-world entities or data structures with named properties.\par

\pard\li720\sa200\sl276\slmult1\b How are objects different from arrays?\par

\pard\sa200\sl276\slmult1\b0\tab\tab\ul\b Purpose:\ulnone\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Arrays are used to store ordered collections of data, while objects are used to store unordered collections of key-value pairs.\par
{\pntext\f2\'B7\tab}\ul\b Access:\par
{\pntext\f2\'B7\tab}\ulnone\b0 Elements in an array are accessed by their numerical index, while properties in an object are accessed by their name (key).\par
{\pntext\f2\'B7\tab}\ul\b Structure:\ulnone\b0\par

\pard\li720\sa200\sl276\slmult1\qc Arrays are typically used when you need to store a list of similar items, while objects are used when you need to store data with different properties.\ul\i\lang9\par

\pard\li720\sa200\sl276\slmult1\cf1\ulnone\b\i0\f1\lang16393\bullet  Question 2: \cf0\b0 Explain how to access and update object properties using dot notation and\f0  \f1 bracket notation.\par
\cf3\b\f0 Ans :\par
\cf0\tab\b0 The main factor that will help you make your decision is the key of the property you want to access. If it is a static key, use Dot Notation. But if it is a dynamic key (evaluated from an expression during runtime), use Bracket Notation.\par
\par

\pard\li720\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52\lang9 JavaScript Events\par

\pard\li720\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What are JavaScript events? Explain the role of event listeners\f0\lang16393  ?\par
\cf3\b Ans  :\cf0\par
\tab In JavaScript, events are actions or occurrences that happen in the browser, such as:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 User interactions: \b0 Clicking a button, moving the mouse, pressing a key, etc.\par
{\pntext\f2\'B7\tab}\b Browser actions: \b0 A page finishing loading, the window resizing, etc.\par
{\pntext\f2\'B7\tab}Event listeners are functions that "listen" for these events and execute a specified action when the event occurs.\par
{\pntext\f2\'B7\tab}\ul\b Here's a breakdown of the key components:\ulnone\b0\par
{\pntext\f2\'B7\tab}\b Event: \b0 The specific action or occurrence that happens.\par
{\pntext\f2\'B7\tab}\b Event Target: \b0 The HTML element or object that triggers the event.\par
{\pntext\f2\'B7\tab}\b Event Listener: \b0 The function that is executed when the event occurs\ul\i\lang9\par

\pard\li720\sa200\sl276\slmult1\b\i0\lang16393 Role of Event Listeners:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\ulnone\b Make web pages interactive:\b0  They allow you to respond to user actions and create dynamic experiences.\par
{\pntext\f2\'B7\tab}\b Handle asynchronous operations: \b0 They allow you to execute code in response to events that happen at unpredictable times.\par
{\pntext\f2\'B7\tab}\b Improve code organization: \b0 They help to separate event-handling logic from other parts of your code.\ul\i\lang9\par

\pard\sa200\sl276\slmult1\par
\cf1\ulnone\b\i0\f1\lang16393\bullet  Question 2: \cf0\b0 How does the addEventListener() method work in JavaScript? Provide an\f0  \f1 example\f0  ?\par
\cf3\b Ans \cf0 :\par
\b0\tab In JavaScript, the addEventListener() method allows you to listen for specific events on an HTML element or the document itself. When the event occurs, the specified function is executed.\par
\ul\b How it works:\ulnone\b0\par
\b Target: \b0 You select the HTML element you want to attach the event listener to.\b\par
Event Type: \b0 You specify the type of event you want to listen for (e.g., click, mouseover, keydown, etc.). \par
\b Listener Function: \b0 You provide a function that will be executed when the event occurs.\par
\b Example:\b0\par
\cf4 // Get the button element\par
\cf0 const button = document.getElementById("myButton");\par
\cf4 // Add a click event listener to the button\par
\cf5 button.addEventListener("click", function() \{\par
\cf4   // This function will be executed when the button is clicked\par
\cf0   console.log("Button clicked!");\par
\});\par
\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52 DOM Manipulation\par

\pard\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What is the DOM (Document Object Model) in JavaScript? How does JavaScript\f0  \f1 interact with the DOM?\b\par
\cf3\f0 Ans :\cf0\tab\par
\tab\b0 The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects; that way, programming languages can interact with the page\par
\b\par
\cf1\f1\bullet  Question 2: \cf0\b0 Explain the methods getElementById(), getElementsByClassName(),and\f0  \f1 querySelector() used to select elements from the DOM.\b\par
\cf3\f0 Ans :\cf0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 GetElementById returns a single DOM element whose ID matches your query. \par
{\pntext\f2\'B7\tab}GetElementsByClassName returns an HtmlCollection - an array-like structure containing the DOM elements that matched your query. You have to iterate through each element in the array to apply your style.\par
{\pntext\f2\'B7\tab}QuerySelectorAll returns a collection of all elements in the document that match the selector.\par

\pard\sa200\sl276\slmult1\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\b\i\fs52 JavaScript Timing Events (setTimeout, setInterval)\par
\fs48\par

\pard\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 Explain the setTimeout() and setInterval() functions in JavaScript. Howare\f0  \f1 they used for timing events?\par
\cf3\b\f0 Ans :\cf0\b0\par
\tab\b JavaScript SetTimeout \b0 and \b Set Interval \b0 are the only native function in JavaScript that is used to run code asynchronously, it means allowing the function to be executed immediately, there is no need to wait for the current execution completion, it will be for further execution.\par
\b\par

\pard\sa200\sl276\slmult1\qc\cf1\ul\i\fs52 JavaScript Error Handling\par

\pard\sa200\sl276\slmult1\ulnone\i0\f1\fs36\bullet  Question 1: \cf0\b0 What is error handling in JavaScript? Explain the try, catch, and finally\f0  \f1 blocks with an example\f0 ?\b\par
\cf3 Ans :\cf0\par
\tab  \b0 JavaScript, error handling is the mechanism to gracefully handle runtime errors, preventing your program from crashing and allowing you to take appropriate actions when errors occur.\par
\b The try...catch...finally statement\par
This statement is the core of JavaScript error handling:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Try block: \b0 Contains the code that might potentially throw an error.\par
{\pntext\f2\'B7\tab}\b Catch block: \b0 Executes if an error occurs within the try block. It allows you to handle the error, typically by logging it, displaying a user-friendly message, or attempting to recover from the error.\b\par
{\pntext\f2\'B7\tab}Finally block:\b0  Executes regardless of whether an error occurred or not. It's typically used for cleanup tasks, such as closing file handles or releasing resources.\ul\i\fs28\lang9\par

\pard\sa200\sl276\slmult1\b\fs36 Example:\b0\fs28\par
\ulnone\b\i0\fs36\lang16393 try \{\par
\b0   // Code that might throw an error\par
  const result = 10 / 0; // Division by zero\par
  console.log(result);\par
\b\} catch (error) \{\b0\par
  // Handle the error\par
  console.error("An error occurred:", error.message);\par
\b\} finally \{\b0\par
  // Code that always executes\par
  console.log("This code runs regardless of errors.");\par
\b\}\par
\par
\cf1\f1\bullet  Question 2: \cf0\b0 Why is error handling important in JavaScript applications?\par
\cf3\b\f0 Ans :\cf0\par
\ul\tab 1. Preventing Crashes and Maintaining Functionality:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone Graceful Degradation:\par

\pard\sa200\sl276\slmult1\b0 Error handling allows your application to gracefully handle unexpected situations without crashing. When errors occur, you can provide alternative behavior, display user-friendly messages, or log the issue for debugging.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b User Experience:\b0\par

\pard\sa200\sl276\slmult1 Unhandled errors can lead to a frustrating user experience. Error handling allows you to display meaningful error messages, guiding users on what went wrong and potentially how to fix it.\par
\b 2. Debugging and Troubleshooting:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Identifying Issues:\par

\pard\sa200\sl276\slmult1\b0 Error handling mechanisms, like try...catch blocks, help you pinpoint where errors occur in your code. This makes debugging much easier.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Logging and Monitoring:\b0\par

\pard\sa200\sl276\slmult1 You can log error details to track and analyze issues, enabling you to proactively fix problems and improve your application's stability.\par
\b 3. Security:\b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Preventing Data Leaks:\par

\pard\sa200\sl276\slmult1\b0 Error handling can help prevent sensitive data from being exposed in error messages.\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Mitigating Attacks:\b0\par

\pard\sa200\sl276\slmult1 Some attacks exploit vulnerabilities in error handling mechanisms. By implementing robust error handling, you can make your application more secure.\ul\i\fs28\lang9\par
}
 